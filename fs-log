#! /usr/bin/python2.5

import os, sys, hashlib, dircache, time, csv, stat
from stat import *

def hash_file(filename):
	print "filename: ", filename,
	file_to_hash = open(filename, 'rb')
	file_stat = os.fstat(file_to_hash.fileno())
	blocks = file_stat[stat.ST_SIZE] / block_size + 1
	print "; size: ", file_stat[stat.ST_SIZE],
	hash = hashlib.sha256()
	start_time = time.time()
	while blocks > 0:
		blocks -= 1
		hash.update(file_to_hash.read(block_size))
	print "; time: ", time.time() - start_time
	return(hash)

def get_dir_list_from_fs(directory):
	#print directory
	dir_content = []
	for file in os.listdir(directory):
		file_stat = os.stat(directory + '/' + file)
		if S_ISDIR(file_stat[ST_MODE]):
			file_type = 'd'
			new_dir = directory
		elif S_ISREG(file_stat[ST_MODE]):
			file_type = 'f'
		else:
			print "unsupported filetype: ", file
			continue
		dir_content.append([file_type,
				file,
				file_stat[ST_SIZE],
				file_stat[ST_MTIME]])
		dir_content.sort()
	return(dir_content)

def get_latest_hist_time(directory):
	latest_time = 0
	for file in os.listdir(directory):
		if file.startswith('dirhash_'):
			file_time = int(file.lstrip('dirhash_'))
			if (latest_time < file_time):
				latest_time = file_time
	return(latest_time)

def get_dir_list_from_hist_file(directory):
	dir_content = []
	hist_time = get_latest_hist_time(directory)
	if (hist_time != 0):
		hist_reader = csv.reader(open(directory + '/' + "dirhash_" + str(hist_time), "rb"),
				delimiter='>',
				quoting=csv.QUOTE_NONE)
		for row in hist_reader:
			if row[0] == 'd':
				row_length = 4
			elif row[0] == 'f':
				row_length = 5
			else:
				print "unknown entry type in history file"
				print row
			if len(row) == row_length:
				dir_content.append(row)
			else:
				print "wrong entry length in history file"
				print row
	else:
		print "no history file found in directory: ", directory
	dir_unsorted = dir_content[:]
	dir_content.sort()
	if dir_content != dir_unsorted:
		print "history file in unsorted state"
	return(dir_content)

def compare_dir(fs_directory, hist_directory):
	dir_content = get_dir_list_from_fs(fs_directory)
	hist_content = get_dir_list_from_hist_file(hist_directory)
	diff = []
	dir_pos = hist_pos = 0
	while (dir_pos < len(dir_content)) & (hist_pos < len(hist_content)):
		if dir_content[dir_pos][0:2] == hist_content[hist_pos][0:2]:
			if dir_content[dir_pos][3] > hist_content[hist_pos][3]:
				diff.append(('u', dir_content[dir_pos]))
			hist_pos += 1
			dir_pos += 1
		elif dir_content[dir_pos][0:2] < hist_content[hist_pos][0:2]:
			diff.append(('n', dir_content[dir_pos]))
			dir_pos += 1
		else:
			diff.append(('e', hist_content[hist_pos]))
			hist_pos += 1
	for file in dir_content[dir_pos:]:
		diff.append(('n', file))
	for file in hist_content[hist_pos:]:
		diff.append(('e', file))
	return(diff, dir_content, hist_content)

#def update_entry(diff_entry):
#	if diff_entry[0] == 'n':
#		pass

def update_hist(fs_directory, hist_directory):
	diff = compare_dir(fs_directory, hist_directory)
	print diff
	if len(diff[0]) == 0:
		return(False, [])
	#new_hist = []
	hist_length = len(diff[2])
	for file in diff[0]:
		hist_pos = 0
		
		if file[0] == 'n':
			diff[2].append(file[1].append(hash_file(
					fs_directory
					+ '/'
					+ file[1][1])))
		else:
			while (hist_pos < hist_length):
				if file[1][0:2] == diff[2][hist_pos][0:2]:
					if file[0] == 'e':
						del diff[2][hist_pos]
						hist_length -= 1
						break
					elif file[O] == 'u':
						diff[2][hist_pos] = file[1].append(
								hash_file(
								fs_directory
								+ '/'
								+ file[1][1]))
					else:
						print "unknown diff statement: ", file[O]
	diff[2].sort()
	return(True, diff[2])

def write_hist(fs_directory, hist_directory):
	new_hist = update_hist(fs_directory, hist_directory)
	if new_hist[0] == True:
		hist_filename = "dirhash_" + str(execution_time)
		if os.path.isfile(hist_directory + '/' + hist_filename) == True:
			print "error. history file exists: ", hist_filename
		else:
			hist_file = open(hist_directory + '/' + hist_filename, 'a')
			hist_file.close()
		hist_writer = csv.writer(open(
				hist_directory + '/' + hist_filename, "wb"),
				delimiter='>',
				quoting=csv.QUOTE_NONE)
		hist_writer.writerows(new_hist[1])
	else:
		
		print "nothing has changed"



if len(sys.argv[1:]) != 3:
	#print 'error'
	#sys.exit(1)
	pass

block_size = 2 ** 16
execution_time = str(time.time()).partition('.')[0]

write_hist(sys.argv[1], sys.argv[2])
